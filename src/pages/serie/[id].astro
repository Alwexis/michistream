---
import Navbar from "../../components/Navbar.astro";
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
    const series = await getCollection('series');
    return series.map((serie) => ({
        params: { id: serie.id },
        props: { serie }
    }))
}

const { serie } = Astro.props;
const { data } = serie;
---

<Layout title={data.nombre}>
    <Navbar />
    <main class="w-full h-full">
        <!-- background -->
        <section class="absolute w-full">
            <img class="h-screen w-full object-cover" src={ data.background.replace("backgrounds", "fondos") } alt={ data.nombre } />
            <div class="absolute top-0 z-10 w-full h-screen bg-black bg-opacity-70"></div>
        </section>
        <section class="relative flex items-center h-screen w-full px-6 py-4 z-30">
            <img class="h-72 w-52 object-cover" src={ data.poster.replace('/resize/200', '').replace("posters", "portadas") } alt={ data.nombre }>
            <div class="flex flex-col h-72 w-full mx-4">
                <h1 class="text-2xl font-bold font-montserrat text-slate-100">{ data.nombre }</h1>
                <section class="flex items-center text-slate-300 font-nunito my-1">
                    <span>Emisión { data.año }</span>
                    <span class="mx-2">⋅</span>
                    <span class="flex items-center">
                        Rating { data.rating ? data.rating : '?' }/10
                        <svg class="mx-1 text-yellow-400" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 18.26l-7.053 3.948l1.575-7.928L.588 8.792l8.027-.952L12 .5l3.385 7.34l8.027.952l-5.934 5.488l1.575 7.928z"/></svg>
                    </span>
                </section>
                <section class="flex items-center space-x-2 first:ml-0 last:mr-0">
                    {
                        data.generos.map((genero: any) => {
                            return (
                                <div class="bg-black bg-opacity-75 text-slate-200 text-sm font-nunito px-2.5 rounded-sm">
                                    <span>{ genero }</span>
                                </div>
                            );
                        })
                    }
                </section>
                <p class="my-2 font-nunito text-slate-200">{ data.descripcion }</p>
                <section class="flex items-center">
                    <a href={`/movie/player/${data.id}`}>
                        <div id="verPelicula" class="w-32 bg-indigo-600 rounded-sm py-1 font-nunito text-center text-neutral-100 font-semibold cursor-pointer hover:bg-indigo-500 transition-all">
                            Ver serie
                        </div>
                    </a>
                    <div class="w-8 h-8 mx-2 hover:bg-red-500 hover:text-slate-200 hover:border-red-400 cursor-pointer bg-slate-200 rounded-sm border border-slate-200 flex items-center justify-center transition-all">
                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M16.5 3C19.538 3 22 5.5 22 9c0 7-7.5 11-10 12.5C9.5 20 2 16 2 9c0-3.5 2.5-6 5.5-6C9.36 3 11 4 12 5c1-1 2.64-2 4.5-2m-3.566 15.604a27 27 0 0 0 2.42-1.701C18.335 14.533 20 11.943 20 9c0-2.36-1.537-4-3.5-4c-1.076 0-2.24.57-3.086 1.414L12 7.828l-1.414-1.414C9.74 5.57 8.576 5 7.5 5C5.56 5 4 6.657 4 9c0 2.944 1.666 5.533 4.645 7.903c.745.593 1.54 1.146 2.421 1.7c.299.189.595.37.934.572c.339-.202.635-.383.934-.571" />
                        </svg>
                    </div>
                </section>
            </div>
        </section>
        <section class="w-full px-6 py-4">
            <h1 class="text-2xl font-semibold font-montserrat text-slate-100">Temporada(s)</h1>
            <div class="w-full flex flex-col my-2">
                {
                    data.temporadas.map((temporada: any) => {
                        return (
                            <section data-expanded="false" class="group w-full bg-slate-800 py-2 px-4 border border-slate-900">
                                <div class="temporada-expand w-full flex items-center text-slate-100 cursor-pointer">
                                    <span class="font-lg font-semibold font-nunito">Temporada {temporada.numero}</span>
                                    <svg class="hidden group-data-[expanded='true']:flex" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 16l-6-6h12z"/></svg>

                                    <svg class="flex group-data-[expanded='true']:hidden" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m16 12l-6 6V6z"/></svg>
                                </div>
                                <div class="max-h-0 overflow-y-auto group-data-[expanded='true']:max-h-[96rem] transition-all duration-500">
                                    {
                                        temporada.episodios.map((episodio: any, index: number) => {
                                            let poster = episodio.poster ? episodio.poster : data.poster;
                                            poster = poster.replace("posters", "portadas");
                                            return (
                                                <section class="flex w-full py-2">
                                                    <img class="h-20" src={ poster } alt="" />
                                                    <div class="mx-2 flex flex-col justify-between text-slate-100 font-nunito">
                                                        <span>{ episodio.numero }. { episodio.nombre ? episodio.nombre : `Episodio número ${ episodio.numero } de ${ data.nombre }` }</span>
                                                        <section class="flex items-center">
                                                            <div data-url={ episodio.video } data-episodename={ episodio.nombre ? episodio.nombre : episodio.numero } data-episode={ episodio.numero } data-prevEpisode={ (index + 1) - 1 } data-nextEpisode={ index + 1 < temporada.episodios.length ? temporada.episodios[index + 1].numero : -1 } class="play-episode flex items-center cursor-pointer py-1 px-2 bg-indigo-500 hover:bg-indigo-600 transition-all rounded-sm text-slate-100">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M8 18.392V5.608L18.226 12zM6 3.804v16.392a1 1 0 0 0 1.53.848l13.113-8.196a1 1 0 0 0 0-1.696L7.53 2.956A1 1 0 0 0 6 3.804"/></svg>
                                                                <span class="mx-1">Reproducir</span>
                                                            </div>
                                                        </section>
                                                    </div>
                                                </section>
                                            )
                                        })
                                    }
                                </div>
                            </section>
                        )
                    })
                }
            </div>
        </section>
        <section id="videoPlayer" class="hidden w-full px-6 py-4">
            <h1 id="reproduciendo" class="text-2xl font-semibold font-montserrat text-slate-100">
            </h1>
            <div class="bg-black w-full flex items-center justify-center">
                <section id="prevEpisode" class="hidden items-center justify-center cursor-pointer rounded-md text-slate-200 mx-2 w-10 h-10 bg-slate-900 shadow-md border border-slate-950">
                    <svg class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m8 12l6-6v12z"/></svg>
                </section>
                <iframe class="my-2 shadow-md border border-slate-950" width=640 height=360 allowfullscreen="true" allow="accelerometer;autoplay;clipboard-write;encrypted-media;gyroscope;picture-in-picture;web-share" frameborder="0"></iframe>
                <section id="nextEpisode" class="hidden items-center justify-center cursor-pointer rounded-md text-slate-200 mx-2 w-10 h-10 bg-slate-900 shadow-md border border-slate-950">
                    <svg class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m16 12l-6 6V6z"/></svg>
                </section>
            </div>
        </section>
    </main>
    <script>
        let actualEl: any;
        let prevEpisode = -1;
        let nextEpisode = -1;

        document.querySelectorAll('.temporada-expand').forEach((e: any) => {
            e.addEventListener('click', () => {
                if (actualEl && actualEl != e) {
                    actualEl.parentElement.dataset.expanded = 'false';
                }
                actualEl = e;
                e.parentElement.dataset.expanded = e.parentElement.dataset.expanded == 'false' ? 'true' : 'false';
            });
        });
        //? Player
        const videoPlayer = document.getElementById('videoPlayer')
        document.querySelectorAll('.play-episode').forEach((e: any) => {
            e.addEventListener('click', () => {
                if (videoPlayer?.classList.contains('hidden')) {
                    videoPlayer.classList.remove('hidden');
                }
                setTimeout(() => changeEpisode(e.dataset.episode), 200);
                closeAllSeasons();
            });
        });

        function changeEpisode(episode: number) {
            let e: any = document.querySelector(`[data-episode="${episode}"]`);
            if (e!.dataset.prevepisode > 0) {
                document.querySelector('#prevEpisode')?.classList.remove('hidden');
                document.querySelector('#prevEpisode')?.classList.add('flex');
                prevEpisode = Number.parseInt(e.dataset.prevepisode);
            } else {
                document.querySelector('#prevEpisode')?.classList.remove('flex');
                document.querySelector('#prevEpisode')?.classList.add('hidden');
            }
            if (e.dataset.nextepisode > 0) {
                document.querySelector('#nextEpisode')?.classList.remove('hidden');
                document.querySelector('#nextEpisode')?.classList.add('flex');
                nextEpisode = Number.parseInt(e.dataset.nextepisode);
            } else {
                document.querySelector('#nextEpisode')?.classList.remove('flex');
                document.querySelector('#nextEpisode')?.classList.add('hidden');
            }
            (document.querySelector('#reproduciendo') as any).innerText = `Reproduciendo Capítulo ${e.dataset.episodename}`
            videoPlayer!.querySelector('iframe')!.src = e.dataset.url;
            videoPlayer!.scrollIntoView({ behavior: "smooth" });
        }

        document.querySelector('#prevEpisode')?.addEventListener('click', (e) => {
            changeEpisode(prevEpisode);
        });
        document.querySelector('#nextEpisode')?.addEventListener('click', (e) => {
            changeEpisode(nextEpisode);
        });

        function closeAllSeasons() {
            document.querySelectorAll('.temporada-expand').forEach((e) => {
                e.parentElement!.dataset.expanded = 'false';
                actualEl = undefined;
            });
        }
    </script>
</Layout>